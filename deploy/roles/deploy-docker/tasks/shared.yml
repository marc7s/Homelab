---
- name: Set paths
  block:
    - ansible.builtin.set_fact:
        local_compose_path: '{{ local_repo_dir }}/Configuration/docker/{{ relative_compose_root }}/{{ compose_name }}.{{ env_name }}.yml'
        remote_compose_directory: '{{ remote_repo_dir }}/Configuration/docker/{{ relative_project_root }}'
        local_env_directory: '{{ local_repo_dir }}/Configuration/docker/{{ relative_compose_root }}'

    # Set the environment file names if it is not an Angular project
    - ansible.builtin.set_fact:
        local_env_file_name: '.env.{{ env_name }}.vault'
        remote_env_path: '{{ remote_build_directory }}/.env'
      when: not is_angular_project

    # Set the environment file names if it is an Angular project
    - ansible.builtin.set_fact:
        local_env_file_name: 'environment.{{ env_name }}.ts.vault'
        remote_env_path: '{{ remote_build_directory }}/src/environments/environment.{{ env_name }}.ts'
      when: is_angular_project

    - ansible.builtin.set_fact:
        remote_compose_path: '{{ remote_compose_directory }}/{{ compose_name }}.{{ env_name }}.yml'
        local_env_path: '{{ local_env_directory }}/{{ local_env_file_name }}'

- name: Create required folders
  become: true
  become_method: su
  become_user: root
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: docker
    group: docker
    mode: '777'
  with_items: '{{ required_folders }}' 

- name: Check if the project has an environment file that needs to be copied
  delegate_to: controller_host
  ansible.builtin.stat:
    path: '{{ local_env_path }}'
  register: local_env_file

- name: Ensure compose directory exists
  become: true
  become_method: su
  become_user: root
  ansible.builtin.file:
    path: '{{ remote_compose_directory }}'
    state: directory

- name: Copy compose file
  become: true
  become_method: su
  become_user: root
  ansible.builtin.template:
    src: '{{ local_compose_path }}'
    dest: '{{ remote_compose_path }}'
    owner: docker
    group: docker
    mode: '0644'

# Stopping the container validates the compose, which will fail if it contains an `env_file` path that has not yet been created
- name: 'Make sure remote env file exists so the next step does not fail'
  become: true
  become_method: su
  become_user: root
  ansible.builtin.file:
    path: '{{ remote_env_path }}'
    state: touch
  when: local_env_file.stat.exists

- name: 'Stop {{ env_name }}-{{ project_name }} container'
  become: true
  become_method: su
  become_user: root
  community.docker.docker_compose:
    project_src: '{{ remote_build_directory }}'
    files:
      - '{{ remote_compose_path }}'
    state: absent

# Copy and unencrypt the .env file and place it in the correct place on the remote
- name: Copy env file
  become: true
  become_method: su
  become_user: root
  ansible.builtin.copy:
    src: '{{ local_env_path }}'
    dest: '{{ remote_env_path }}'
    owner: docker
    group: docker
    mode: '0644'
  when: local_env_file.stat.exists


- name: 'Deploy {{ env_name }}-{{ project_name }} container'
  become: true
  become_method: su
  become_user: root
  community.docker.docker_compose:
    project_src: '{{ remote_build_directory }}'
    project_name: '{{ project_name }}-{{ env_name }}'
    build: true
    restarted: true
    files:
      - '{{ remote_compose_path }}'

- name: 'Remove unused images and volumes'
  become: true
  become_method: su
  become_user: root
  community.docker.docker_prune:
    images: true
    volumes: true