---
- name: Set paths
  block:
    - ansible.builtin.set_fact:
        local_compose_path: '{{ local_repo_dir }}/Configuration/docker/{{ relative_compose_root }}/{{ compose_name }}.{{ env_name }}.yml'
        remote_compose_directory: '{{ remote_repo_dir }}/Configuration/docker/{{ relative_project_root }}'
        local_env_directory: '{{ local_repo_dir }}/Configuration/docker/{{ relative_compose_root }}'
        remote_env_directory: '{{ remote_build_directory }}'

    - ansible.builtin.set_fact:
        remote_compose_path: '{{ remote_compose_directory }}/{{ compose_name }}.{{ env_name }}.yml'

- name: Create required folders
  become: true
  become_method: su
  become_user: root
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '777'
  with_items: '{{ required_folders }}' 

- name: Check if the project has any environment files
  delegate_to: controller_host
  ansible.builtin.find:
    paths: '{{ local_env_directory }}'
    hidden: true
    patterns:
      - '.env.{{ env_name }}.*'
      - 'environment.{{ env_name }}.*' # Used by Angular
  register: local_env_files_result

- name: Check if the project has any development environment files
  delegate_to: controller_host
  ansible.builtin.find:
    paths: '{{ local_env_directory }}'
    hidden: true
    patterns:
      - '.env.dev.*'
      - 'environment.dev.*' # Used by Angular
  register: local_dev_env_files_result

- name: Get the environment file names
  ansible.builtin.set_fact:
    local_env_files: '{{ local_env_files_result.files | map(attribute="path") | map("basename") }}'
    local_dev_env_files: '{{ local_dev_env_files_result.files | map(attribute="path") | map("basename") }}'

- name: Ensure compose directory exists
  become: true
  become_method: su
  become_user: root
  ansible.builtin.file:
    path: '{{ remote_compose_directory }}'
    state: directory

- name: Copy compose file
  become: true
  become_method: su
  become_user: root
  ansible.builtin.template:
    src: '{{ local_compose_path }}'
    dest: '{{ remote_compose_path }}'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0644'

# Stopping the container validates the compose, which will fail if it contains an `env_file` path that has not yet been created
- name: 'Make sure remote env files exists so the next step does not fail'
  become: true
  become_method: su
  become_user: root
  ansible.builtin.file:
    path: '{{ remote_env_directory }}/{{ item | get_remote_env_filename(env_name, strip_env_file_name) }}'
    state: touch
  with_items: '{{ local_env_files }}'

- name: 'Stop {{ env_name }}-{{ project_name }} container'
  become: true
  become_method: su
  become_user: root
  community.docker.docker_compose_v2:
    project_src: '{{ remote_build_directory }}'
    files:
      - '{{ remote_compose_path }}'
    state: 'absent'

# Copy and unencrypt the environment files and place them in the correct place on the remote
- name: Copy env file
  become: true
  become_method: su
  become_user: root
  ansible.builtin.copy:
    src: '{{ local_env_directory }}/{{ item }}'
    dest: '{{ remote_env_directory }}/{{ item | get_remote_env_filename(env_name, strip_env_file_name) }}'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0644'
  with_items: '{{ local_env_files }}'


- name: 'Deploy {{ env_name }}-{{ project_name }} container'
  become: true
  become_method: su
  become_user: root
  community.docker.docker_compose_v2:
    project_src: '{{ remote_build_directory }}'
    project_name: '{{ project_name }}-{{ env_name }}'
    build: 'always'
    state: 'present'
    recreate: "always"
    files:
      - '{{ remote_compose_path }}'

# Copy the dev env files to restore after other deployments, since that env file might be used by DEV
- name: Restore DEV env files
  become: true
  become_method: su
  become_user: root
  ansible.builtin.copy:
    src: '{{ local_env_directory }}/{{ item }}'
    dest: '{{ remote_env_directory }}/{{ item | get_remote_env_filename("dev", strip_env_file_name) }}'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0644'
  with_items: '{{ local_dev_env_files }}'
  when: env_name != 'dev'

- name: 'Remove unused images and volumes'
  become: true
  become_method: su
  become_user: root
  community.docker.docker_prune:
    images: true
    volumes: true